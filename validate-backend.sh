#!/bin/bash

# üîç BACKEND VALIDATION & COMPATIBILITY CHECK
# √úberpr√ºft alle API-Routen und Backend-Module systematisch

set -e

echo "üîç BACKEND VALIDATION & COMPATIBILITY CHECK"
echo "==========================================="

cd /var/www/dash-automation || cd "$(pwd)"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 1. CHECK CORE MODULES
echo -e "${YELLOW}üìã STEP 1: Checking core modules...${NC}"

echo "üîç Checking lib/auth.ts..."
if [ -f "lib/auth.ts" ]; then
    echo -e "${GREEN}‚úÖ lib/auth.ts exists${NC}"
    
    # Check for required functions
    if grep -q "authenticateUser" lib/auth.ts; then
        echo -e "${GREEN}‚úÖ authenticateUser function found${NC}"
    else
        echo -e "${RED}‚ùå authenticateUser function missing${NC}"
    fi
    
    if grep -q "loginUser" lib/auth.ts; then
        echo -e "${GREEN}‚úÖ loginUser function found${NC}"
    else
        echo -e "${RED}‚ùå loginUser function missing${NC}"
    fi
    
    if grep -q "verifyToken" lib/auth.ts; then
        echo -e "${GREEN}‚úÖ verifyToken function found${NC}"
    else
        echo -e "${RED}‚ùå verifyToken function missing${NC}"
    fi
else
    echo -e "${RED}‚ùå lib/auth.ts missing - CRITICAL ERROR${NC}"
fi

echo "üîç Checking lib/database.ts..."
if [ -f "lib/database.ts" ]; then
    echo -e "${GREEN}‚úÖ lib/database.ts exists${NC}"
    
    # Check for required functions
    if grep -q "getUserById\|getUserByUsername" lib/database.ts; then
        echo -e "${GREEN}‚úÖ User functions found${NC}"
    else
        echo -e "${RED}‚ùå User functions missing${NC}"
    fi
else
    echo -e "${RED}‚ùå lib/database.ts missing - CRITICAL ERROR${NC}"
fi

# 2. CHECK API ROUTES
echo -e "\n${YELLOW}üìã STEP 2: Checking API routes...${NC}"

API_ROUTES_COUNT=0
PROBLEMATIC_ROUTES=()

find app/api -name "*.ts" -type f | while read file; do
    API_ROUTES_COUNT=$((API_ROUTES_COUNT + 1))
    echo "üîç Checking $file..."
    
    # Check for outdated imports
    if grep -q "auth-new\|database-new" "$file"; then
        echo -e "${RED}‚ùå Outdated imports found in $file${NC}"
        PROBLEMATIC_ROUTES+=("$file")
    fi
    
    # Check for deprecated functions
    if grep -q "authenticateRequest" "$file"; then
        echo -e "${RED}‚ùå Deprecated authenticateRequest found in $file${NC}"
        PROBLEMATIC_ROUTES+=("$file")
    fi
    
    # Check for proper imports
    if grep -q "@/lib/auth" "$file" && ! grep -q "auth-new" "$file"; then
        echo -e "${GREEN}‚úÖ Proper auth import in $file${NC}"
    fi
done

echo -e "\n${YELLOW}üìä API Routes Summary:${NC}"
echo "Total API routes found: $(find app/api -name "*.ts" -type f | wc -l)"

# 3. CHECK MIDDLEWARE
echo -e "\n${YELLOW}üìã STEP 3: Checking middleware...${NC}"

if [ -f "middleware.ts" ]; then
    echo -e "${GREEN}‚úÖ middleware.ts exists${NC}"
    
    if grep -q "auth-new" middleware.ts; then
        echo -e "${RED}‚ùå Outdated import in middleware.ts${NC}"
    else
        echo -e "${GREEN}‚úÖ Middleware imports are clean${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è middleware.ts not found${NC}"
fi

# 4. CHECK COMPONENT IMPORTS
echo -e "\n${YELLOW}üìã STEP 4: Checking component imports...${NC}"

COMPONENT_ISSUES=0

find components -name "*.tsx" -type f | while read file; do
    if grep -q "auth-new\|database-new" "$file"; then
        echo -e "${RED}‚ùå Outdated imports in $file${NC}"
        COMPONENT_ISSUES=$((COMPONENT_ISSUES + 1))
    fi
done

if [ $COMPONENT_ISSUES -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All component imports are clean${NC}"
fi

# 5. CHECK PAGES/APP ROUTER
echo -e "\n${YELLOW}üìã STEP 5: Checking app router structure...${NC}"

if [ -d "app" ]; then
    echo -e "${GREEN}‚úÖ App router structure found${NC}"
    
    # Check for layout.tsx
    if [ -f "app/layout.tsx" ]; then
        echo -e "${GREEN}‚úÖ app/layout.tsx exists${NC}"
    else
        echo -e "${RED}‚ùå app/layout.tsx missing${NC}"
    fi
    
    # Check for page.tsx
    if [ -f "app/page.tsx" ]; then
        echo -e "${GREEN}‚úÖ app/page.tsx exists${NC}"
    else
        echo -e "${RED}‚ùå app/page.tsx missing${NC}"
    fi
    
    # Check dashboard structure
    if [ -d "app/dashboard" ]; then
        echo -e "${GREEN}‚úÖ Dashboard structure exists${NC}"
    else
        echo -e "${RED}‚ùå Dashboard structure missing${NC}"
    fi
else
    echo -e "${RED}‚ùå App router structure missing - CRITICAL ERROR${NC}"
fi

# 6. CHECK DEPENDENCIES
echo -e "\n${YELLOW}üìã STEP 6: Checking dependencies...${NC}"

if [ -f "package.json" ]; then
    echo -e "${GREEN}‚úÖ package.json exists${NC}"
    
    # Check for required dependencies
    if grep -q "\"next\"" package.json; then
        echo -e "${GREEN}‚úÖ Next.js dependency found${NC}"
    else
        echo -e "${RED}‚ùå Next.js dependency missing${NC}"
    fi
    
    if grep -q "\"react\"" package.json; then
        echo -e "${GREEN}‚úÖ React dependency found${NC}"
    else
        echo -e "${RED}‚ùå React dependency missing${NC}"
    fi
    
    if grep -q "\"jsonwebtoken\"" package.json; then
        echo -e "${GREEN}‚úÖ JWT dependency found${NC}"
    else
        echo -e "${RED}‚ùå JWT dependency missing${NC}"
    fi
    
    if grep -q "\"bcryptjs\"" package.json; then
        echo -e "${GREEN}‚úÖ Bcrypt dependency found${NC}"
    else
        echo -e "${RED}‚ùå Bcrypt dependency missing${NC}"
    fi
else
    echo -e "${RED}‚ùå package.json missing - CRITICAL ERROR${NC}"
fi

# 7. CHECK CONFIGURATION
echo -e "\n${YELLOW}üìã STEP 7: Checking configuration...${NC}"

if [ -f "next.config.js" ]; then
    echo -e "${GREEN}‚úÖ next.config.js exists${NC}"
    
    if grep -q "standalone" next.config.js; then
        echo -e "${GREEN}‚úÖ Standalone output configured${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Standalone output not configured${NC}"
    fi
else
    echo -e "${RED}‚ùå next.config.js missing${NC}"
fi

if [ -f "tsconfig.json" ]; then
    echo -e "${GREEN}‚úÖ tsconfig.json exists${NC}"
else
    echo -e "${RED}‚ùå tsconfig.json missing${NC}"
fi

# 8. CHECK BUILD FILES
echo -e "\n${YELLOW}üìã STEP 8: Checking build status...${NC}"

if [ -d ".next" ]; then
    echo -e "${GREEN}‚úÖ .next directory exists${NC}"
    
    if [ -f ".next/standalone/server.js" ]; then
        echo -e "${GREEN}‚úÖ Standalone build found${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Standalone build missing${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è .next directory missing - needs build${NC}"
fi

# 9. FINAL VALIDATION REPORT
echo -e "\n${YELLOW}üìä FINAL VALIDATION REPORT${NC}"
echo "=================================="

echo -e "\n${GREEN}‚úÖ WORKING COMPONENTS:${NC}"
echo "‚Ä¢ Core module structure exists"
echo "‚Ä¢ API routes are present"
echo "‚Ä¢ App router structure is in place"
echo "‚Ä¢ Dependencies are configured"

echo -e "\n${YELLOW}‚ö†Ô∏è POTENTIAL ISSUES:${NC}"
echo "‚Ä¢ Check for outdated imports in API routes"
echo "‚Ä¢ Verify all auth functions are properly implemented"
echo "‚Ä¢ Ensure database module is complete"
echo "‚Ä¢ Build may need to be regenerated"

echo -e "\n${RED}‚ùå CRITICAL ITEMS TO CHECK:${NC}"
if [ ! -f "lib/auth.ts" ]; then
    echo "‚Ä¢ lib/auth.ts is missing - MUST BE FIXED"
fi
if [ ! -f "lib/database.ts" ]; then
    echo "‚Ä¢ lib/database.ts is missing - MUST BE FIXED"
fi
if [ ! -f "package.json" ]; then
    echo "‚Ä¢ package.json is missing - MUST BE FIXED"
fi

echo -e "\n${GREEN}üéØ RECOMMENDED NEXT STEPS:${NC}"
echo "1. Run cleanup-project.sh to fix all issues"
echo "2. Test authentication endpoints"
echo "3. Verify database connections"
echo "4. Build and deploy to production"

echo -e "\n${GREEN}üîç BACKEND VALIDATION COMPLETE!${NC}"
